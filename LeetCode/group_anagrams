from collections import defaultdict
class Solution:
    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:

        group_map = defaultdict(list)

        for word in strs:
            sorted_string = "".join(sorted(word))
            group_map[sorted_string].append(word)
        return list(group_map.values())
        
     #   n = len(strs)
     #   for i in strs:
     #       print(i)
     #       #d[i][] = {}
     #   word_count= defaultdict(int)
     #   word_count["apple"] += 1
     #   print(word_count)


# Second Solution where we don't have to use default dict


class Solution1:
    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:

        group_map = {}
        print("    Second Solution without using defaultdict    ")

        for word in strs:
            sorted_string = "".join(sorted(word))
            if sorted_string in group_map:
                print(group_map)
                group_map[sorted_string].append(word)
            else:
                print(group_map)
                group_map[sorted_string] = [word]
        return list(group_map.values())
    
# Third Solution where we don't use sort and instead do solution in O(m*n*26)


class Solution2:
    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:
        print("   This is the Third Solution    ")
        res = defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord("a") ] += 1
            res[tuple(count)].append(s)
        return list(res.values())
        
s = Solution()
print(s.groupAnagrams(["eat","tea","tan","ate","nat","bat"]))
s1 = Solution1()
s2 = Solution2()
print(s1.groupAnagrams(["eat","tea","tan","ate","nat","bat"]))
print(s2.groupAnagrams(["eat","tea","tan","ate","nat","bat"]))